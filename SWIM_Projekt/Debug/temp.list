
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ac  080054ac  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054ac  080054ac  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054ac  080054ac  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054b0  080054b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080054b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dba8  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b01  00000000  00000000  00014be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  000166e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b1  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd42  00000000  00000000  00017ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa07  00000000  00000000  00037a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6739  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010db6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d4  00000000  00000000  0010dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00111084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053f0 	.word	0x080053f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080053f0 	.word	0x080053f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <L_WHL_Forward>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void L_WHL_Forward()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f001 f90e 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2140      	movs	r1, #64	@ 0x40
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f001 f908 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <L_WHL_Reverse>:

void L_WHL_Reverse()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2180      	movs	r1, #128	@ 0x80
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f001 f8fe 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	@ 0x40
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f001 f8f8 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <R_WHL_Forward>:
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
}

void R_WHL_Forward()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <R_WHL_Forward+0x1c>)
 8000a5e:	f001 f8ef 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2140      	movs	r1, #64	@ 0x40
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <R_WHL_Forward+0x20>)
 8000a68:	f001 f8ea 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	48000800 	.word	0x48000800
 8000a74:	48000400 	.word	0x48000400

08000a78 <R_WHL_Reverse>:

void R_WHL_Reverse()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <R_WHL_Reverse+0x1c>)
 8000a82:	f001 f8dd 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <R_WHL_Reverse+0x20>)
 8000a8c:	f001 f8d8 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	48000800 	.word	0x48000800
 8000a98:	48000400 	.word	0x48000400

08000a9c <ALL_WHL_Forward>:
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
}

void ALL_WHL_Forward()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2180      	movs	r1, #128	@ 0x80
 8000aa4:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <ALL_WHL_Forward+0x34>)
 8000aa6:	f001 f8cb 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2140      	movs	r1, #64	@ 0x40
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <ALL_WHL_Forward+0x38>)
 8000ab0:	f001 f8c6 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f001 f8c0 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f001 f8ba 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <ALL_WHL_Reverse>:

void ALL_WHL_Reverse()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2180      	movs	r1, #128	@ 0x80
 8000ae0:	480a      	ldr	r0, [pc, #40]	@ (8000b0c <ALL_WHL_Reverse+0x34>)
 8000ae2:	f001 f8ad 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	@ 0x40
 8000aea:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <ALL_WHL_Reverse+0x38>)
 8000aec:	f001 f8a8 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2180      	movs	r1, #128	@ 0x80
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f001 f8a2 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	@ 0x40
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f001 f89c 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000400 	.word	0x48000400

08000b14 <ALL_WHL_Stop>:

void ALL_WHL_Stop()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <ALL_WHL_Stop+0x34>)
 8000b1e:	f001 f88f 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <ALL_WHL_Stop+0x38>)
 8000b28:	f001 f88a 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f001 f884 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2140      	movs	r1, #64	@ 0x40
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b40:	f001 f87e 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000400 	.word	0x48000400

08000b50 <Turn_Left>:

void Turn_Left()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	L_WHL_Reverse();
 8000b54:	f7ff ff6e 	bl	8000a34 <L_WHL_Reverse>
	R_WHL_Forward();
 8000b58:	f7ff ff7c 	bl	8000a54 <R_WHL_Forward>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Turn_Right>:

void Turn_Right()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	L_WHL_Forward();
 8000b64:	f7ff ff56 	bl	8000a14 <L_WHL_Forward>
	R_WHL_Reverse();
 8000b68:	f7ff ff86 	bl	8000a78 <R_WHL_Reverse>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fd25 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f98d 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fb19 	bl	80011b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b82:	f000 f9e1 	bl	8000f48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b86:	f000 fa97 	bl	80010b8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b8a:	f000 fae3 	bl	8001154 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	48b7      	ldr	r0, [pc, #732]	@ (8000e70 <main+0x300>)
 8000b92:	f002 fe05 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b96:	2104      	movs	r1, #4
 8000b98:	48b5      	ldr	r0, [pc, #724]	@ (8000e70 <main+0x300>)
 8000b9a:	f002 fe01 	bl	80037a0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8000b9e:	4bb4      	ldr	r3, [pc, #720]	@ (8000e70 <main+0x300>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ba6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 3000);
 8000ba8:	4bb1      	ldr	r3, [pc, #708]	@ (8000e70 <main+0x300>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_Base_Start(&htim2);
 8000bb2:	48b0      	ldr	r0, [pc, #704]	@ (8000e74 <main+0x304>)
 8000bb4:	f002 fd2a 	bl	800360c <HAL_TIM_Base_Start>
  ALL_WHL_Stop();
 8000bb8:	f7ff ffac 	bl	8000b14 <ALL_WHL_Stop>
  mode = 0;
 8000bbc:	4bae      	ldr	r3, [pc, #696]	@ (8000e78 <main+0x308>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  //WHL_Debug();
	  switch(mode)
 8000bc2:	4bad      	ldr	r3, [pc, #692]	@ (8000e78 <main+0x308>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	f000 8143 	beq.w	8000e54 <main+0x2e4>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	dcf7      	bgt.n	8000bc2 <main+0x52>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 808a 	beq.w	8000cec <main+0x17c>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f000 8101 	beq.w	8000de0 <main+0x270>
 8000bde:	e7f0      	b.n	8000bc2 <main+0x52>
	  {
	  	  case 0: //control direction through UART
	  		  while(mode==0)
	  		  {
	  			  uint8_t CMD;
	  			  HAL_UART_Receive(&huart2, &CMD, 1, HAL_MAX_DELAY);
 8000be0:	1cf9      	adds	r1, r7, #3
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	2201      	movs	r2, #1
 8000be8:	48a4      	ldr	r0, [pc, #656]	@ (8000e7c <main+0x30c>)
 8000bea:	f003 ff1c 	bl	8004a26 <HAL_UART_Receive>
	  			  switch(CMD)
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	3b41      	subs	r3, #65	@ 0x41
 8000bf2:	2b16      	cmp	r3, #22
 8000bf4:	d870      	bhi.n	8000cd8 <main+0x168>
 8000bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bfc <main+0x8c>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c79 	.word	0x08000c79
 8000c00:	08000cd9 	.word	0x08000cd9
 8000c04:	08000cd9 	.word	0x08000cd9
 8000c08:	08000cb9 	.word	0x08000cb9
 8000c0c:	08000cd9 	.word	0x08000cd9
 8000c10:	08000cd9 	.word	0x08000cd9
 8000c14:	08000cd9 	.word	0x08000cd9
 8000c18:	08000cd9 	.word	0x08000cd9
 8000c1c:	08000cd9 	.word	0x08000cd9
 8000c20:	08000cd9 	.word	0x08000cd9
 8000c24:	08000cd9 	.word	0x08000cd9
 8000c28:	08000cd9 	.word	0x08000cd9
 8000c2c:	08000cd9 	.word	0x08000cd9
 8000c30:	08000cd9 	.word	0x08000cd9
 8000c34:	08000cd9 	.word	0x08000cd9
 8000c38:	08000cd9 	.word	0x08000cd9
 8000c3c:	08000cd9 	.word	0x08000cd9
 8000c40:	08000cd9 	.word	0x08000cd9
 8000c44:	08000c99 	.word	0x08000c99
 8000c48:	08000cd9 	.word	0x08000cd9
 8000c4c:	08000cd9 	.word	0x08000cd9
 8000c50:	08000cd9 	.word	0x08000cd9
 8000c54:	08000c59 	.word	0x08000c59
	  			  {
	  			  	  case 'W':
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Command: Forward\r\n", 18, HAL_MAX_DELAY);
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	2212      	movs	r2, #18
 8000c5e:	4988      	ldr	r1, [pc, #544]	@ (8000e80 <main+0x310>)
 8000c60:	4886      	ldr	r0, [pc, #536]	@ (8000e7c <main+0x30c>)
 8000c62:	f003 fe57 	bl	8004914 <HAL_UART_Transmit>
	  			  		  ALL_WHL_Forward();
 8000c66:	f7ff ff19 	bl	8000a9c <ALL_WHL_Forward>
	  			  		  HAL_Delay(300);
 8000c6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c6e:	f000 fd0f 	bl	8001690 <HAL_Delay>
	  			  		  ALL_WHL_Stop();
 8000c72:	f7ff ff4f 	bl	8000b14 <ALL_WHL_Stop>
	  			  		  break;
 8000c76:	e039      	b.n	8000cec <main+0x17c>
	  			  	  case 'A':
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Command: Turn left\r\n", 20, HAL_MAX_DELAY);
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	2214      	movs	r2, #20
 8000c7e:	4981      	ldr	r1, [pc, #516]	@ (8000e84 <main+0x314>)
 8000c80:	487e      	ldr	r0, [pc, #504]	@ (8000e7c <main+0x30c>)
 8000c82:	f003 fe47 	bl	8004914 <HAL_UART_Transmit>
	  			  		  Turn_Left();
 8000c86:	f7ff ff63 	bl	8000b50 <Turn_Left>
	  			  		  HAL_Delay(300);
 8000c8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c8e:	f000 fcff 	bl	8001690 <HAL_Delay>
	  			  		  ALL_WHL_Stop();
 8000c92:	f7ff ff3f 	bl	8000b14 <ALL_WHL_Stop>
	  			  		  break;
 8000c96:	e029      	b.n	8000cec <main+0x17c>
	  			  	  case 'S':
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Command: Reverse\r\n", 18, HAL_MAX_DELAY);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2212      	movs	r2, #18
 8000c9e:	497a      	ldr	r1, [pc, #488]	@ (8000e88 <main+0x318>)
 8000ca0:	4876      	ldr	r0, [pc, #472]	@ (8000e7c <main+0x30c>)
 8000ca2:	f003 fe37 	bl	8004914 <HAL_UART_Transmit>
	  			  		  ALL_WHL_Reverse();
 8000ca6:	f7ff ff17 	bl	8000ad8 <ALL_WHL_Reverse>
	  			  		  HAL_Delay(300);
 8000caa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cae:	f000 fcef 	bl	8001690 <HAL_Delay>
	  			  		  ALL_WHL_Stop();
 8000cb2:	f7ff ff2f 	bl	8000b14 <ALL_WHL_Stop>
	  			  		  break;
 8000cb6:	e019      	b.n	8000cec <main+0x17c>
	  			  	  case 'D':
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Command: Turn right\r\n", 21, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	2215      	movs	r2, #21
 8000cbe:	4973      	ldr	r1, [pc, #460]	@ (8000e8c <main+0x31c>)
 8000cc0:	486e      	ldr	r0, [pc, #440]	@ (8000e7c <main+0x30c>)
 8000cc2:	f003 fe27 	bl	8004914 <HAL_UART_Transmit>
	  			  		  Turn_Right();
 8000cc6:	f7ff ff4b 	bl	8000b60 <Turn_Right>
	  			  		  HAL_Delay(300);
 8000cca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cce:	f000 fcdf 	bl	8001690 <HAL_Delay>
	  			  		  ALL_WHL_Stop();
 8000cd2:	f7ff ff1f 	bl	8000b14 <ALL_WHL_Stop>
	  			  		  break;
 8000cd6:	e009      	b.n	8000cec <main+0x17c>
	  			  	  default:
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	2211      	movs	r2, #17
 8000cde:	496c      	ldr	r1, [pc, #432]	@ (8000e90 <main+0x320>)
 8000ce0:	4866      	ldr	r0, [pc, #408]	@ (8000e7c <main+0x30c>)
 8000ce2:	f003 fe17 	bl	8004914 <HAL_UART_Transmit>
	  			  		  ALL_WHL_Stop();
 8000ce6:	f7ff ff15 	bl	8000b14 <ALL_WHL_Stop>
	  			  		  break;
 8000cea:	bf00      	nop
	  		  while(mode==0)
 8000cec:	4b62      	ldr	r3, [pc, #392]	@ (8000e78 <main+0x308>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f43f af74 	beq.w	8000be0 <main+0x70>
	  			  }
	  		  }
	  	  case 1: //drive forward until an object is detected
	  		  while(mode==1)
 8000cf8:	e072      	b.n	8000de0 <main+0x270>
	  		  {
	  			  HAL_GPIO_WritePin(SENSOR_F_TRIG_GPIO_Port, SENSOR_F_TRIG_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4865      	ldr	r0, [pc, #404]	@ (8000e94 <main+0x324>)
 8000d00:	f000 ff9e 	bl	8001c40 <HAL_GPIO_WritePin>
	  			  HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fcc3 	bl	8001690 <HAL_Delay>
	  			  HAL_GPIO_WritePin(SENSOR_F_TRIG_GPIO_Port, SENSOR_F_TRIG_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4861      	ldr	r0, [pc, #388]	@ (8000e94 <main+0x324>)
 8000d10:	f000 ff96 	bl	8001c40 <HAL_GPIO_WritePin>

	  			  while(HAL_GPIO_ReadPin(SENSOR_F_ECHO_GPIO_Port, SENSOR_F_ECHO_Pin)==GPIO_PIN_RESET);
 8000d14:	bf00      	nop
 8000d16:	2108      	movs	r1, #8
 8000d18:	485e      	ldr	r0, [pc, #376]	@ (8000e94 <main+0x324>)
 8000d1a:	f000 ff79 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <main+0x1a6>
	  			  uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000d24:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <main+0x304>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	613b      	str	r3, [r7, #16]

	  			  while(HAL_GPIO_ReadPin(SENSOR_F_ECHO_GPIO_Port, SENSOR_F_ECHO_Pin)==GPIO_PIN_SET);
 8000d2c:	bf00      	nop
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4858      	ldr	r0, [pc, #352]	@ (8000e94 <main+0x324>)
 8000d32:	f000 ff6d 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d0f8      	beq.n	8000d2e <main+0x1be>
	  			  uint32_t end = __HAL_TIM_GET_COUNTER(&htim2);
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <main+0x304>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d42:	60fb      	str	r3, [r7, #12]

	  			  uint32_t duration = end - start;
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	60bb      	str	r3, [r7, #8]
	  			  float dist_cm = duration * 0.034 / 2;
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff fb85 	bl	800045c <__aeabi_ui2d>
 8000d52:	a345      	add	r3, pc, #276	@ (adr r3, 8000e68 <main+0x2f8>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fbfa 	bl	8000550 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d6c:	f7ff fd1a 	bl	80007a4 <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fdfc 	bl	8000974 <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	607b      	str	r3, [r7, #4]

	  			  if(dist_cm <= 25)
 8000d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d84:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d81e      	bhi.n	8000dd0 <main+0x260>
	  			  {
	  				  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2120      	movs	r1, #32
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 ff51 	bl	8001c40 <HAL_GPIO_WritePin>
	  				  ALL_WHL_Stop();
 8000d9e:	f7ff feb9 	bl	8000b14 <ALL_WHL_Stop>
	  				  HAL_Delay(500);
 8000da2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000da6:	f000 fc73 	bl	8001690 <HAL_Delay>
	  				  ALL_WHL_Reverse();
 8000daa:	f7ff fe95 	bl	8000ad8 <ALL_WHL_Reverse>
	  				  HAL_Delay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db2:	f000 fc6d 	bl	8001690 <HAL_Delay>
	  				  Turn_Right();
 8000db6:	f7ff fed3 	bl	8000b60 <Turn_Right>
	  				  HAL_Delay(300);
 8000dba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000dbe:	f000 fc67 	bl	8001690 <HAL_Delay>
	  				  ALL_WHL_Stop();
 8000dc2:	f7ff fea7 	bl	8000b14 <ALL_WHL_Stop>
	  				  HAL_Delay(500);
 8000dc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dca:	f000 fc61 	bl	8001690 <HAL_Delay>
 8000dce:	e007      	b.n	8000de0 <main+0x270>
	  			  }
	  			  else
	  			  {
	  				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f000 ff32 	bl	8001c40 <HAL_GPIO_WritePin>
	  				ALL_WHL_Forward();
 8000ddc:	f7ff fe5e 	bl	8000a9c <ALL_WHL_Forward>
	  		  while(mode==1)
 8000de0:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <main+0x308>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d087      	beq.n	8000cfa <main+0x18a>
	  			  }
	  		  }
	  		  break;
 8000dea:	e039      	b.n	8000e60 <main+0x2f0>
	  	  case 2: //follow a black line
	  		  while(mode==2)
	  		  {
	  			  uint8_t SENSOR_L = HAL_GPIO_ReadPin(SENSOR_L_GPIO_Port, SENSOR_L_Pin);
 8000dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df4:	f000 ff0c 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]
	  			  uint8_t SENSOR_R = HAL_GPIO_ReadPin(SENSOR_R_GPIO_Port, SENSOR_R_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4825      	ldr	r0, [pc, #148]	@ (8000e94 <main+0x324>)
 8000e00:	f000 ff06 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	75bb      	strb	r3, [r7, #22]

	  			  if(((SENSOR_L==0) && (SENSOR_R==0)) || ((SENSOR_L==1) && (SENSOR_R==1)))
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <main+0x2a4>
 8000e0e:	7dbb      	ldrb	r3, [r7, #22]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <main+0x2b0>
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10c      	bne.n	8000e34 <main+0x2c4>
 8000e1a:	7dbb      	ldrb	r3, [r7, #22]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d109      	bne.n	8000e34 <main+0x2c4>
	  			  {
	  				  ALL_WHL_Forward();
 8000e20:	f7ff fe3c 	bl	8000a9c <ALL_WHL_Forward>
	  				  HAL_Delay(40);
 8000e24:	2028      	movs	r0, #40	@ 0x28
 8000e26:	f000 fc33 	bl	8001690 <HAL_Delay>
	  				  ALL_WHL_Stop();
 8000e2a:	f7ff fe73 	bl	8000b14 <ALL_WHL_Stop>
	  				  HAL_Delay(90);
 8000e2e:	205a      	movs	r0, #90	@ 0x5a
 8000e30:	f000 fc2e 	bl	8001690 <HAL_Delay>
	  			  }
	  			  if((SENSOR_L==1) && (SENSOR_R==0))
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d104      	bne.n	8000e44 <main+0x2d4>
 8000e3a:	7dbb      	ldrb	r3, [r7, #22]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <main+0x2d4>
	  			  {
	  				  Turn_Left();
 8000e40:	f7ff fe86 	bl	8000b50 <Turn_Left>
	  			  }
	  			  if((SENSOR_L==0) && (SENSOR_R==1))
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <main+0x2e4>
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <main+0x2e4>
	  			  {
	  				  Turn_Right();
 8000e50:	f7ff fe86 	bl	8000b60 <Turn_Right>
	  		  while(mode==2)
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <main+0x308>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d0c6      	beq.n	8000dec <main+0x27c>
	  			  }
	  		  }
	  		  break;
 8000e5e:	bf00      	nop
	  switch(mode)
 8000e60:	e6af      	b.n	8000bc2 <main+0x52>
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	b020c49c 	.word	0xb020c49c
 8000e6c:	3fa16872 	.word	0x3fa16872
 8000e70:	20000028 	.word	0x20000028
 8000e74:	20000074 	.word	0x20000074
 8000e78:	20000148 	.word	0x20000148
 8000e7c:	200000c0 	.word	0x200000c0
 8000e80:	08005408 	.word	0x08005408
 8000e84:	0800541c 	.word	0x0800541c
 8000e88:	08005434 	.word	0x08005434
 8000e8c:	08005448 	.word	0x08005448
 8000e90:	08005460 	.word	0x08005460
 8000e94:	48000400 	.word	0x48000400

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a6      	sub	sp, #152	@ 0x98
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ea2:	2228      	movs	r2, #40	@ 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fa75 	bl	8005396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2258      	movs	r2, #88	@ 0x58
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fa67 	bl	8005396 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fee9 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eec:	f000 fa06 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fef8 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f16:	f000 f9f1 	bl	80012fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <SystemClock_Config+0xac>)
 8000f1c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 f8f9 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f38:	f000 f9e0 	bl	80012fc <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3798      	adds	r7, #152	@ 0x98
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	00101002 	.word	0x00101002

08000f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09a      	sub	sp, #104	@ 0x68
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	222c      	movs	r2, #44	@ 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fa07 	bl	8005396 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80010b4 <MX_TIM1_Init+0x16c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000f8e:	4b48      	ldr	r3, [pc, #288]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000f9a:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000f9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b41      	ldr	r3, [pc, #260]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b40      	ldr	r3, [pc, #256]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb4:	483e      	ldr	r0, [pc, #248]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000fb6:	f002 fad1 	bl	800355c <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f000 f99c 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4837      	ldr	r0, [pc, #220]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000fd2:	f002 fe05 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fdc:	f000 f98e 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe0:	4833      	ldr	r0, [pc, #204]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8000fe2:	f002 fb7b 	bl	80036dc <HAL_TIM_PWM_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fec:	f000 f986 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001000:	4619      	mov	r1, r3
 8001002:	482b      	ldr	r0, [pc, #172]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8001004:	f003 fb26 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800100e:	f000 f975 	bl	80012fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	@ 0x60
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	481e      	ldr	r0, [pc, #120]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8001038:	f002 fcbe 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001042:	f000 f95b 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001046:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800104a:	2204      	movs	r2, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8001050:	f002 fcb2 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800105a:	f000 f94f 	bl	80012fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001072:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001076:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001080:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <MX_TIM1_Init+0x168>)
 8001094:	f003 fb6a 	bl	800476c <HAL_TIMEx_ConfigBreakDeadTime>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800109e:	f000 f92d 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <MX_TIM1_Init+0x168>)
 80010a4:	f000 f986 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3768      	adds	r7, #104	@ 0x68
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000028 	.word	0x20000028
 80010b4:	40012c00 	.word	0x40012c00

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_TIM2_Init+0x98>)
 8001100:	f002 fa2c 	bl	800355c <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800110a:	f000 f8f7 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_TIM2_Init+0x98>)
 800111c:	f002 fd60 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001126:	f000 f8e9 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <MX_TIM2_Init+0x98>)
 8001138:	f003 fa8c 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001142:	f000 f8db 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000074 	.word	0x20000074

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <MX_USART2_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001160:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001198:	f003 fb6e 	bl	8004878 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f8ab 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000c0 	.word	0x200000c0
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b49      	ldr	r3, [pc, #292]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a42      	ldr	r2, [pc, #264]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b40      	ldr	r3, [pc, #256]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a3c      	ldr	r2, [pc, #240]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <MX_GPIO_Init+0x13c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	21e0      	movs	r1, #224	@ 0xe0
 8001216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121a:	f000 fd11 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	4834      	ldr	r0, [pc, #208]	@ (80012f4 <MX_GPIO_Init+0x140>)
 8001224:	f000 fd0c 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_F_TRIG_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2150      	movs	r1, #80	@ 0x50
 800122c:	4832      	ldr	r0, [pc, #200]	@ (80012f8 <MX_GPIO_Init+0x144>)
 800122e:	f000 fd07 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	482a      	ldr	r0, [pc, #168]	@ (80012f4 <MX_GPIO_Init+0x140>)
 800124a:	f000 fb57 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|IN4_Pin|IN3_Pin;
 800124e:	23e0      	movs	r3, #224	@ 0xe0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001268:	f000 fb48 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	481c      	ldr	r0, [pc, #112]	@ (80012f4 <MX_GPIO_Init+0x140>)
 8001284:	f000 fb3a 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_L_Pin */
  GPIO_InitStruct.Pin = SENSOR_L_Pin;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR_L_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a0:	f000 fb2c 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_F_ECHO_Pin SENSOR_R_Pin */
  GPIO_InitStruct.Pin = SENSOR_F_ECHO_Pin|SENSOR_R_Pin;
 80012a4:	2328      	movs	r3, #40	@ 0x28
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	4810      	ldr	r0, [pc, #64]	@ (80012f8 <MX_GPIO_Init+0x144>)
 80012b8:	f000 fb20 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_F_TRIG_Pin IN2_Pin */
  GPIO_InitStruct.Pin = SENSOR_F_TRIG_Pin|IN2_Pin;
 80012bc:	2350      	movs	r3, #80	@ 0x50
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <MX_GPIO_Init+0x144>)
 80012d4:	f000 fb12 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2028      	movs	r0, #40	@ 0x28
 80012de:	f000 fad6 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e2:	2028      	movs	r0, #40	@ 0x28
 80012e4:	f000 faef 	bl	80018c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000400 	.word	0x48000400

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_TIM_Base_MspInit+0x5c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10c      	bne.n	800137c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 8001368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800137a:	e010      	b.n	800139e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001384:	d10b      	bne.n	800139e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_TIM_Base_MspInit+0x60>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_TIM_MspPostInit+0x68>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11d      	bne.n	8001412 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_TIM_MspPostInit+0x6c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_TIM_MspPostInit+0x6c>)
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_TIM_MspPostInit+0x6c>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 80013ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001400:	2306      	movs	r3, #6
 8001402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f000 fa75 	bl	80018fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_UART_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d128      	bne.n	8001498 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_UART_MspInit+0x80>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001486:	2307      	movs	r3, #7
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f000 fa32 	bl	80018fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40021000 	.word	0x40021000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f8a7 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)!=GPIO_PIN_RESET)
 800150c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <EXTI15_10_IRQHandler+0x3c>)
 8001512:	f000 fb7d 	bl	8001c10 <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00d      	beq.n	8001538 <EXTI15_10_IRQHandler+0x30>
	{
		if(mode+1==3)
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <EXTI15_10_IRQHandler+0x40>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d103      	bne.n	800152c <EXTI15_10_IRQHandler+0x24>
			mode=0;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <EXTI15_10_IRQHandler+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e005      	b.n	8001538 <EXTI15_10_IRQHandler+0x30>
		else
			mode++;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <EXTI15_10_IRQHandler+0x40>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <EXTI15_10_IRQHandler+0x40>)
 8001536:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001538:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800153c:	f000 fb98 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000800 	.word	0x48000800
 8001548:	20000148 	.word	0x20000148

0800154c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff ffea 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 ff03 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff fae5 	bl	8000b70 <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015b4:	080054b4 	.word	0x080054b4
  ldr r2, =_sbss
 80015b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015bc:	20000150 	.word	0x20000150

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_Init+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_Init+0x28>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f94f 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	200f      	movs	r0, #15
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff fe92 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f967 	bl	80018e2 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f92f 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	@ (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000008 	.word	0x20000008
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	2000014c 	.word	0x2000014c

08001678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;  
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000014c 	.word	0x2000014c

08001690 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff3e 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff31 	bl	800173c <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e160      	b.n	8001bce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8152 	beq.w	8001bc8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0201 	and.w	r2, r3, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80ac 	beq.w	8001bc8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b5e      	ldr	r3, [pc, #376]	@ (8001bec <HAL_GPIO_Init+0x2f0>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a5d      	ldr	r2, [pc, #372]	@ (8001bec <HAL_GPIO_Init+0x2f0>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <HAL_GPIO_Init+0x2f0>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a59      	ldr	r2, [pc, #356]	@ (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ab2:	d025      	beq.n	8001b00 <HAL_GPIO_Init+0x204>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf4 <HAL_GPIO_Init+0x2f8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01f      	beq.n	8001afc <HAL_GPIO_Init+0x200>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf8 <HAL_GPIO_Init+0x2fc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d019      	beq.n	8001af8 <HAL_GPIO_Init+0x1fc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8001bfc <HAL_GPIO_Init+0x300>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1f8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x304>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1f4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c04 <HAL_GPIO_Init+0x308>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_GPIO_Init+0x30c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1ec>
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	e00c      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001ae8:	2307      	movs	r3, #7
 8001aea:	e00a      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001aec:	2305      	movs	r3, #5
 8001aee:	e008      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x206>
 8001b00:	2300      	movs	r3, #0
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b12:	4937      	ldr	r1, [pc, #220]	@ (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b20:	4b3a      	ldr	r3, [pc, #232]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b44:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4a:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b6e:	4a27      	ldr	r2, [pc, #156]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b98:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <HAL_GPIO_Init+0x310>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f ae97 	bne.w	800190c <HAL_GPIO_Init+0x10>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	48001000 	.word	0x48001000
 8001c04:	48001400 	.word	0x48001400
 8001c08:	48001800 	.word	0x48001800
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f806 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f001 b80a 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8161 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf4:	4bae      	ldr	r3, [pc, #696]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d00:	4bab      	ldr	r3, [pc, #684]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x104>
 8001d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d18:	d150      	bne.n	8001dbc <HAL_RCC_OscConfig+0x104>
 8001d1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d3a:	d802      	bhi.n	8001d42 <HAL_RCC_OscConfig+0x8a>
 8001d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0xb6>
 8001d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d46:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d5a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d6a:	4b91      	ldr	r3, [pc, #580]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d72:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001d76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001d7a:	fa92 f2a2 	rbit	r2, r2
 8001d7e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001d82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8108 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x2fc>
 8001da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 80ff 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f000 bf9b 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x124>
 8001dce:	4b78      	ldr	r3, [pc, #480]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a77      	ldr	r2, [pc, #476]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e036      	b.n	8001e4a <HAL_RCC_OscConfig+0x192>
 8001ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x14e>
 8001dec:	4b70      	ldr	r3, [pc, #448]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6f      	ldr	r2, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e021      	b.n	8001e4a <HAL_RCC_OscConfig+0x192>
 8001e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x17a>
 8001e18:	4b65      	ldr	r3, [pc, #404]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a64      	ldr	r2, [pc, #400]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b62      	ldr	r3, [pc, #392]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a61      	ldr	r2, [pc, #388]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x192>
 8001e32:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d054      	beq.n	8001f04 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fc0d 	bl	8001678 <HAL_GetTick>
 8001e5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fc08 	bl	8001678 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	@ 0x64
 8001e72:	d902      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f000 bf3c 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e7e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001e8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9a:	d802      	bhi.n	8001ea2 <HAL_RCC_OscConfig+0x1ea>
 8001e9c:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x216>
 8001ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eba:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ebe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001eca:	4b39      	ldr	r3, [pc, #228]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001ed6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001ee2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0b0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1ac>
 8001f02:	e058      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fbb8 	bl	8001678 <HAL_GetTick>
 8001f08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fbb3 	bl	8001678 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d902      	bls.n	8001f24 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f000 bee7 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8001f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f28:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001f38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f44:	d802      	bhi.n	8001f4c <HAL_RCC_OscConfig+0x294>
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e015      	b.n	8001f78 <HAL_RCC_OscConfig+0x2c0>
 8001f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f50:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f64:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_RCC_OscConfig+0x2f8>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f7c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001f80:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1b0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x256>
 8001fac:	e003      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2fe>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 816d 	beq.w	80022a6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fcc:	4bcd      	ldr	r3, [pc, #820]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fd8:	4bca      	ldr	r3, [pc, #808]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d16e      	bne.n	80020c2 <HAL_RCC_OscConfig+0x40a>
 8001fe4:	4bc7      	ldr	r3, [pc, #796]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff0:	d167      	bne.n	80020c2 <HAL_RCC_OscConfig+0x40a>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002004:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002010:	d802      	bhi.n	8002018 <HAL_RCC_OscConfig+0x360>
 8002012:	4bbc      	ldr	r3, [pc, #752]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002030:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800203c:	4bb1      	ldr	r3, [pc, #708]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002046:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002052:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCC_OscConfig+0x3d0>
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f000 be35 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b9e      	ldr	r3, [pc, #632]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002094:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	21f8      	movs	r1, #248	@ 0xf8
 800209e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80020a6:	fa91 f1a1 	rbit	r1, r1
 80020aa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80020ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020b2:	fab1 f181 	clz	r1, r1
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	408b      	lsls	r3, r1
 80020ba:	4992      	ldr	r1, [pc, #584]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c0:	e0f1      	b.n	80022a6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8083 	beq.w	80021da <HAL_RCC_OscConfig+0x522>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80020e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	461a      	mov	r2, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff faba 	bl	8001678 <HAL_GetTick>
 8002104:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff fab5 	bl	8001678 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d902      	bls.n	8002120 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	f000 bde9 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002132:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b3f      	cmp	r3, #63	@ 0x3f
 800213e:	d802      	bhi.n	8002146 <HAL_RCC_OscConfig+0x48e>
 8002140:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e013      	b.n	800216e <HAL_RCC_OscConfig+0x4b6>
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002158:	2302      	movs	r3, #2
 800215a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800215e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800216a:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	2202      	movs	r2, #2
 8002170:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002174:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002180:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f042 0220 	orr.w	r2, r2, #32
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f002 021f 	and.w	r2, r2, #31
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f202 	lsl.w	r2, r1, r2
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0b4      	beq.n	800210a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	21f8      	movs	r1, #248	@ 0xf8
 80021b6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80021be:	fa91 f1a1 	rbit	r1, r1
 80021c2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80021c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021ca:	fab1 f181 	clz	r1, r1
 80021ce:	b2c9      	uxtb	r1, r1
 80021d0:	408b      	lsls	r3, r1
 80021d2:	494c      	ldr	r1, [pc, #304]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e065      	b.n	80022a6 <HAL_RCC_OscConfig+0x5ee>
 80021da:	2301      	movs	r3, #1
 80021dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80021ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	461a      	mov	r2, r3
 8002202:	2300      	movs	r3, #0
 8002204:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fa37 	bl	8001678 <HAL_GetTick>
 800220a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fa32 	bl	8001678 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d902      	bls.n	8002226 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	f000 bd66 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002238:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b3f      	cmp	r3, #63	@ 0x3f
 8002244:	d802      	bhi.n	800224c <HAL_RCC_OscConfig+0x594>
 8002246:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e013      	b.n	8002274 <HAL_RCC_OscConfig+0x5bc>
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002264:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_RCC_OscConfig+0x64c>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800227a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800227e:	fa92 f2a2 	rbit	r2, r2
 8002282:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002286:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f042 0220 	orr.w	r2, r2, #32
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f002 021f 	and.w	r2, r2, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f202 	lsl.w	r2, r1, r2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1b4      	bne.n	8002210 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8119 	beq.w	80024ee <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8082 	beq.w	80023d2 <HAL_RCC_OscConfig+0x71a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80022e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_OscConfig+0x650>)
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff f9be 	bl	8001678 <HAL_GetTick>
 80022fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002300:	e00f      	b.n	8002322 <HAL_RCC_OscConfig+0x66a>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f9b4 	bl	8001678 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d902      	bls.n	8002322 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	f000 bce8 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002334:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002342:	2202      	movs	r2, #2
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002362:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002380:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4bb0      	ldr	r3, [pc, #704]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 8002384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800238e:	2102      	movs	r1, #2
 8002390:	6019      	str	r1, [r3, #0]
 8002392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f1a3 	rbit	r1, r3
 80023a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023a8:	6019      	str	r1, [r3, #0]
  return result;
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d09d      	beq.n	800230c <HAL_RCC_OscConfig+0x654>
 80023d0:	e08d      	b.n	80024ee <HAL_RCC_OscConfig+0x836>
 80023d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023f4:	601a      	str	r2, [r3, #0]
  return result;
 80023f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	4b8f      	ldr	r3, [pc, #572]	@ (8002648 <HAL_RCC_OscConfig+0x990>)
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2300      	movs	r3, #0
 8002412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff f930 	bl	8001678 <HAL_GetTick>
 8002418:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff f92b 	bl	8001678 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	f000 bc5f 	b.w	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002438:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800243c:	2202      	movs	r2, #2
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002444:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002452:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002476:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002484:	2202      	movs	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800249e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80024a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024ac:	2102      	movs	r1, #2
 80024ae:	6019      	str	r1, [r3, #0]
 80024b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f1a3 	rbit	r1, r3
 80024be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024c6:	6019      	str	r1, [r3, #0]
  return result;
 80024c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d197      	bne.n	800241e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 819c 	beq.w	800283c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b4e      	ldr	r3, [pc, #312]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a4a      	ldr	r2, [pc, #296]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b48      	ldr	r3, [pc, #288]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_OscConfig+0x994>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11a      	bne.n	8002586 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002550:	4b3e      	ldr	r3, [pc, #248]	@ (800264c <HAL_RCC_OscConfig+0x994>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3d      	ldr	r2, [pc, #244]	@ (800264c <HAL_RCC_OscConfig+0x994>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255c:	f7ff f88c 	bl	8001678 <HAL_GetTick>
 8002560:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7ff f887 	bl	8001678 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e3bb      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b34      	ldr	r3, [pc, #208]	@ (800264c <HAL_RCC_OscConfig+0x994>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ef      	beq.n	8002566 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x8ec>
 8002596:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a2a      	ldr	r2, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e035      	b.n	8002610 <HAL_RCC_OscConfig+0x958>
 80025a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x916>
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a22      	ldr	r2, [pc, #136]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e020      	b.n	8002610 <HAL_RCC_OscConfig+0x958>
 80025ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x940>
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x958>
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <HAL_RCC_OscConfig+0x98c>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002614:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8085 	beq.w	800272c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff f829 	bl	8001678 <HAL_GetTick>
 8002626:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e011      	b.n	8002650 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff f824 	bl	8001678 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d907      	bls.n	8002650 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e356      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002644:	40021000 	.word	0x40021000
 8002648:	10908120 	.word	0x10908120
 800264c:	40007000 	.word	0x40007000
 8002650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002654:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002684:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002692:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0xa00>
 80026b2:	4b98      	ldr	r3, [pc, #608]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	e013      	b.n	80026e0 <HAL_RCC_OscConfig+0xa28>
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026c0:	2202      	movs	r2, #2
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026e4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026e8:	2102      	movs	r1, #2
 80026ea:	6011      	str	r1, [r2, #0]
 80026ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	fa92 f1a2 	rbit	r1, r2
 80026fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026fe:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002702:	6011      	str	r1, [r2, #0]
  return result;
 8002704:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002708:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	fab2 f282 	clz	r2, r2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f002 021f 	and.w	r2, r2, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d080      	beq.n	800262c <HAL_RCC_OscConfig+0x974>
 800272a:	e07d      	b.n	8002828 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe ffa4 	bl	8001678 <HAL_GetTick>
 8002730:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe ff9f 	bl	8001678 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e2d1      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 800274e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002752:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002756:	2202      	movs	r2, #2
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002794:	601a      	str	r2, [r3, #0]
  return result;
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800279e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_RCC_OscConfig+0xafe>
 80027b0:	4b58      	ldr	r3, [pc, #352]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	e013      	b.n	80027de <HAL_RCC_OscConfig+0xb26>
 80027b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027be:	2202      	movs	r2, #2
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b4e      	ldr	r3, [pc, #312]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027e6:	2102      	movs	r1, #2
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ee:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fa92 f1a2 	rbit	r1, r2
 80027f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027fc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002800:	6011      	str	r1, [r2, #0]
  return result;
 8002802:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002806:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d186      	bne.n	8002736 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002828:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b38      	ldr	r3, [pc, #224]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a37      	ldr	r2, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8251 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	f000 820f 	beq.w	8002c7a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002860:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b02      	cmp	r3, #2
 800286a:	f040 8165 	bne.w	8002b38 <HAL_RCC_OscConfig+0xe80>
 800286e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002872:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002876:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002880:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002892:	601a      	str	r2, [r3, #0]
  return result;
 8002894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002898:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800289c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	461a      	mov	r2, r3
 80028b0:	2300      	movs	r3, #0
 80028b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fee0 	bl	8001678 <HAL_GetTick>
 80028b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028bc:	e009      	b.n	80028d2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fedb 	bl	8001678 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e20f      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 80028d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028f6:	601a      	str	r2, [r3, #0]
  return result;
 80028f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b3f      	cmp	r3, #63	@ 0x3f
 800290a:	d805      	bhi.n	8002918 <HAL_RCC_OscConfig+0xc60>
 800290c:	4b01      	ldr	r3, [pc, #4]	@ (8002914 <HAL_RCC_OscConfig+0xc5c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e02a      	b.n	8002968 <HAL_RCC_OscConfig+0xcb0>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002942:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002946:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002950:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4bca      	ldr	r3, [pc, #808]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800296c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002970:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800297a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002988:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002992:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d184      	bne.n	80028be <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b4:	4bb6      	ldr	r3, [pc, #728]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f023 020f 	bic.w	r2, r3, #15
 80029bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	49b1      	ldr	r1, [pc, #708]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80029ce:	4bb0      	ldr	r3, [pc, #704]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80029d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a19      	ldr	r1, [r3, #32]
 80029e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	49a7      	ldr	r1, [pc, #668]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 80029f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a20:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a24:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	461a      	mov	r2, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe1c 	bl	8001678 <HAL_GetTick>
 8002a40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fe17 	bl	8001678 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e14b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a7e:	601a      	str	r2, [r3, #0]
  return result;
 8002a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a84:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a92:	d802      	bhi.n	8002a9a <HAL_RCC_OscConfig+0xde2>
 8002a94:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e027      	b.n	8002aea <HAL_RCC_OscConfig+0xe32>
 8002a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002af2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002af6:	6011      	str	r1, [r2, #0]
 8002af8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002afc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	fa92 f1a2 	rbit	r1, r2
 8002b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b0a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002b0e:	6011      	str	r1, [r2, #0]
  return result;
 8002b10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b14:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	fab2 f282 	clz	r2, r2
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f042 0220 	orr.w	r2, r2, #32
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f002 021f 	and.w	r2, r2, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d087      	beq.n	8002a46 <HAL_RCC_OscConfig+0xd8e>
 8002b36:	e0db      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1038>
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fa93 f2a3 	rbit	r2, r3
 8002b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b5c:	601a      	str	r2, [r3, #0]
  return result;
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fd7b 	bl	8001678 <HAL_GetTick>
 8002b82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b86:	e009      	b.n	8002b9c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fd76 	bl	8001678 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0aa      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bc0:	601a      	str	r2, [r3, #0]
  return result;
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bd4:	d802      	bhi.n	8002bdc <HAL_RCC_OscConfig+0xf24>
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e027      	b.n	8002c2c <HAL_RCC_OscConfig+0xf74>
 8002bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c14:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c22:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_RCC_OscConfig+0xfd8>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	fa92 f1a2 	rbit	r1, r2
 8002c48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c4c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002c50:	6011      	str	r1, [r2, #0]
  return result;
 8002c52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c56:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f002 021f 	and.w	r2, r2, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d187      	bne.n	8002b88 <HAL_RCC_OscConfig+0xed0>
 8002c78:	e03a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e031      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_RCC_OscConfig+0x1044>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c9c:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_RCC_OscConfig+0x1044>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ca8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d117      	bne.n	8002cec <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002cc0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b09e      	sub	sp, #120	@ 0x78
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e154      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b89      	ldr	r3, [pc, #548]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b86      	ldr	r3, [pc, #536]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4984      	ldr	r1, [pc, #528]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e13c      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b7b      	ldr	r3, [pc, #492]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4978      	ldr	r1, [pc, #480]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80cd 	beq.w	8002f0e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d137      	bne.n	8002dec <HAL_RCC_ClockConfig+0xec>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d94:	d802      	bhi.n	8002d9c <HAL_RCC_ClockConfig+0x9c>
 8002d96:	4b6b      	ldr	r3, [pc, #428]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e00f      	b.n	8002dbc <HAL_RCC_ClockConfig+0xbc>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002daa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8002db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db8:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dc4:	fa92 f2a2 	rbit	r2, r2
 8002dc8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002dca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0220 	orr.w	r2, r2, #32
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d171      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0ea      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d137      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x164>
 8002df4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e0c:	d802      	bhi.n	8002e14 <HAL_RCC_ClockConfig+0x114>
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_ClockConfig+0x134>
 8002e14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e30:	4b44      	ldr	r3, [pc, #272]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d135      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0ae      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
 8002e64:	2302      	movs	r3, #2
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e7a:	d802      	bhi.n	8002e82 <HAL_RCC_ClockConfig+0x182>
 8002e7c:	4b31      	ldr	r3, [pc, #196]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e00d      	b.n	8002e9e <HAL_RCC_ClockConfig+0x19e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	2302      	movs	r3, #2
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	61ba      	str	r2, [r7, #24]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	617a      	str	r2, [r7, #20]
  return result;
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e07a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 0203 	bic.w	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	491a      	ldr	r1, [pc, #104]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ede:	f7fe fbcb 	bl	8001678 <HAL_GetTick>
 8002ee2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee6:	f7fe fbc7 	bl	8001678 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e062      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 020c 	and.w	r2, r3, #12
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d1eb      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d215      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 0207 	bic.w	r2, r3, #7
 8002f24:	4906      	ldr	r1, [pc, #24]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d006      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x2c2>
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCC_ClockConfig+0x2cc>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	491a      	ldr	r1, [pc, #104]	@ (8002fcc <HAL_RCC_ClockConfig+0x2cc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f72:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_RCC_ClockConfig+0x2cc>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4912      	ldr	r1, [pc, #72]	@ (8002fcc <HAL_RCC_ClockConfig+0x2cc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f86:	f000 f829 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fcc <HAL_RCC_ClockConfig+0x2cc>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f94:	22f0      	movs	r2, #240	@ 0xf0
 8002f96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	fa92 f2a2 	rbit	r2, r2
 8002f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	40d3      	lsrs	r3, r2
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x2d0>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	fa21 f303 	lsr.w	r3, r1, r3
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <HAL_RCC_ClockConfig+0x2d4>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_RCC_ClockConfig+0x2d8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fb18 	bl	80015f0 <HAL_InitTick>
  
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3778      	adds	r7, #120	@ 0x78
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08005474 	.word	0x08005474
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x30>
 8003006:	2b08      	cmp	r3, #8
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x36>
 800300a:	e029      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800300c:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800300e:	613b      	str	r3, [r7, #16]
      break;
 8003010:	e029      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	4a18      	ldr	r2, [pc, #96]	@ (800307c <HAL_RCC_GetSysClockFreq+0xa0>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x98>)
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <HAL_RCC_GetSysClockFreq+0xa4>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003038:	4a0f      	ldr	r2, [pc, #60]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e007      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800304a:	4a0b      	ldr	r2, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	613b      	str	r3, [r7, #16]
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003062:	613b      	str	r3, [r7, #16]
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	693b      	ldr	r3, [r7, #16]
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	0800548c 	.word	0x0800548c
 8003080:	0800549c 	.word	0x0800549c

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030a2:	f7ff ffef 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a6:	4601      	mov	r1, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030b0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	fa92 f2a2 	rbit	r2, r2
 80030bc:	603a      	str	r2, [r7, #0]
  return result;
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	40d3      	lsrs	r3, r2
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08005484 	.word	0x08005484

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030e6:	f7ff ffcd 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030ea:	4601      	mov	r1, r0
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030f4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	603a      	str	r2, [r7, #0]
  return result;
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	40d3      	lsrs	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x40>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08005484 	.word	0x08005484

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	@ 0x48
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80d2 	beq.w	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003148:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10e      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315e:	61d3      	str	r3, [r2, #28]
 8003160:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b44      	ldr	r3, [pc, #272]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a40      	ldr	r2, [pc, #256]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7fe fa75 	bl	8001678 <HAL_GetTick>
 800318e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe fa71 	bl	8001678 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b64      	cmp	r3, #100	@ 0x64
 800319e:	d901      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1d4      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b37      	ldr	r3, [pc, #220]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8082 	beq.w	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d07a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2301      	movs	r3, #1
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	461a      	mov	r2, r3
 800321e:	2300      	movs	r3, #0
 8003220:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003222:	4a17      	ldr	r2, [pc, #92]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003226:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d049      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fa21 	bl	8001678 <HAL_GetTick>
 8003236:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe fa1d 	bl	8001678 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e17e      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003250:	2302      	movs	r3, #2
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
 800325c:	2302      	movs	r3, #2
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	61fb      	str	r3, [r7, #28]
  return result;
 8003268:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800327a:	4b01      	ldr	r3, [pc, #4]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	e00d      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
 8003288:	10908100 	.word	0x10908100
 800328c:	2302      	movs	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	4b9a      	ldr	r3, [pc, #616]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2202      	movs	r2, #2
 800329e:	613a      	str	r2, [r7, #16]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	60fa      	str	r2, [r7, #12]
  return result;
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0b9      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	498c      	ldr	r1, [pc, #560]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a87      	ldr	r2, [pc, #540]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f8:	4b82      	ldr	r3, [pc, #520]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f023 0203 	bic.w	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	497f      	ldr	r1, [pc, #508]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003316:	4b7b      	ldr	r3, [pc, #492]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4978      	ldr	r1, [pc, #480]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003334:	4b73      	ldr	r3, [pc, #460]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	4970      	ldr	r1, [pc, #448]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	4313      	orrs	r3, r2
 8003344:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003352:	4b6c      	ldr	r3, [pc, #432]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f023 0210 	bic.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4969      	ldr	r1, [pc, #420]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003370:	4b64      	ldr	r3, [pc, #400]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	4961      	ldr	r1, [pc, #388]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338e:	4b5d      	ldr	r3, [pc, #372]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f023 0220 	bic.w	r2, r3, #32
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	495a      	ldr	r1, [pc, #360]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ac:	4b55      	ldr	r3, [pc, #340]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	4952      	ldr	r1, [pc, #328]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	494b      	ldr	r1, [pc, #300]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e8:	4b46      	ldr	r3, [pc, #280]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	4943      	ldr	r1, [pc, #268]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003406:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	493c      	ldr	r1, [pc, #240]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003424:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	4934      	ldr	r1, [pc, #208]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003442:	4b30      	ldr	r3, [pc, #192]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	492d      	ldr	r1, [pc, #180]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800347e:	4b21      	ldr	r3, [pc, #132]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	491e      	ldr	r1, [pc, #120]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	4916      	ldr	r1, [pc, #88]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c6:	490f      	ldr	r1, [pc, #60]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e4:	4907      	ldr	r1, [pc, #28]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034f6:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	4913      	ldr	r1, [pc, #76]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	490b      	ldr	r1, [pc, #44]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800352a:	4313      	orrs	r3, r2
 800352c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	4904      	ldr	r1, [pc, #16]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003548:	4313      	orrs	r3, r2
 800354a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3748      	adds	r7, #72	@ 0x48
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e049      	b.n	8003602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fee4 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fbea 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e047      	b.n	80036b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	@ (80036c0 <HAL_TIM_Base_Start+0xb4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d018      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <HAL_TIM_Base_Start+0xb8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	@ (80036c8 <HAL_TIM_Base_Start+0xbc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <HAL_TIM_Base_Start+0xc0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_TIM_Base_Start+0xc4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a19      	ldr	r2, [pc, #100]	@ (80036d4 <HAL_TIM_Base_Start+0xc8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d115      	bne.n	800369e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4b17      	ldr	r3, [pc, #92]	@ (80036d8 <HAL_TIM_Base_Start+0xcc>)
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b06      	cmp	r3, #6
 8003682:	d015      	beq.n	80036b0 <HAL_TIM_Base_Start+0xa4>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d011      	beq.n	80036b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369c:	e008      	b.n	80036b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40015000 	.word	0x40015000
 80036d8:	00010007 	.word	0x00010007

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f841 	bl	800378a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fb2a 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_Start+0x24>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e03c      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d109      	bne.n	80037de <HAL_TIM_PWM_Start+0x3e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e02f      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d109      	bne.n	80037f8 <HAL_TIM_PWM_Start+0x58>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e022      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d109      	bne.n	8003812 <HAL_TIM_PWM_Start+0x72>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e015      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b10      	cmp	r3, #16
 8003816:	d109      	bne.n	800382c <HAL_TIM_PWM_Start+0x8c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0a1      	b.n	800398a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0xb6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003854:	e023      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0xc6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	e01b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0xd6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003874:	e013      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xe6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003884:	e00b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b10      	cmp	r3, #16
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xf6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003894:	e003      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 feae 	bl	8004608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <HAL_TIM_PWM_Start+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x148>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a37      	ldr	r2, [pc, #220]	@ (8003998 <HAL_TIM_PWM_Start+0x1f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x148>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a35      	ldr	r2, [pc, #212]	@ (800399c <HAL_TIM_PWM_Start+0x1fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x148>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a34      	ldr	r2, [pc, #208]	@ (80039a0 <HAL_TIM_PWM_Start+0x200>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x148>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a32      	ldr	r2, [pc, #200]	@ (80039a4 <HAL_TIM_PWM_Start+0x204>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x148>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_TIM_PWM_Start+0x208>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_TIM_PWM_Start+0x14c>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_TIM_PWM_Start+0x14e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a23      	ldr	r2, [pc, #140]	@ (8003994 <HAL_TIM_PWM_Start+0x1f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003914:	d018      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a24      	ldr	r2, [pc, #144]	@ (80039ac <HAL_TIM_PWM_Start+0x20c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <HAL_TIM_PWM_Start+0x210>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <HAL_TIM_PWM_Start+0x1f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	@ (800399c <HAL_TIM_PWM_Start+0x1fc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_TIM_PWM_Start+0x1a8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <HAL_TIM_PWM_Start+0x208>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d115      	bne.n	8003974 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <HAL_TIM_PWM_Start+0x214>)
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d015      	beq.n	8003986 <HAL_TIM_PWM_Start+0x1e6>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003960:	d011      	beq.n	8003986 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e000      	b.n	8003988 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40013400 	.word	0x40013400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40015000 	.word	0x40015000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	00010007 	.word	0x00010007

080039b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0ff      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b14      	cmp	r3, #20
 80039e2:	f200 80f0 	bhi.w	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039e6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	08003bc7 	.word	0x08003bc7
 80039f4:	08003bc7 	.word	0x08003bc7
 80039f8:	08003bc7 	.word	0x08003bc7
 80039fc:	08003a81 	.word	0x08003a81
 8003a00:	08003bc7 	.word	0x08003bc7
 8003a04:	08003bc7 	.word	0x08003bc7
 8003a08:	08003bc7 	.word	0x08003bc7
 8003a0c:	08003ac3 	.word	0x08003ac3
 8003a10:	08003bc7 	.word	0x08003bc7
 8003a14:	08003bc7 	.word	0x08003bc7
 8003a18:	08003bc7 	.word	0x08003bc7
 8003a1c:	08003b03 	.word	0x08003b03
 8003a20:	08003bc7 	.word	0x08003bc7
 8003a24:	08003bc7 	.word	0x08003bc7
 8003a28:	08003bc7 	.word	0x08003bc7
 8003a2c:	08003b45 	.word	0x08003b45
 8003a30:	08003bc7 	.word	0x08003bc7
 8003a34:	08003bc7 	.word	0x08003bc7
 8003a38:	08003bc7 	.word	0x08003bc7
 8003a3c:	08003b85 	.word	0x08003b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fa3e 	bl	8003ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6999      	ldr	r1, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	619a      	str	r2, [r3, #24]
      break;
 8003a7e:	e0a5      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fab8 	bl	8003ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]
      break;
 8003ac0:	e084      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fb2b 	bl	8004124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0208 	orr.w	r2, r2, #8
 8003adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0204 	bic.w	r2, r2, #4
 8003aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69d9      	ldr	r1, [r3, #28]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	61da      	str	r2, [r3, #28]
      break;
 8003b00:	e064      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fb9d 	bl	8004248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69d9      	ldr	r1, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	021a      	lsls	r2, r3, #8
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	61da      	str	r2, [r3, #28]
      break;
 8003b42:	e043      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fbec 	bl	8004328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b82:	e023      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fc36 	bl	80043fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bc4:	e002      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop

08003be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIM_ConfigClockSource+0x1c>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e0b6      	b.n	8003d6a <HAL_TIM_ConfigClockSource+0x18a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0xd8>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_TIM_ConfigClockSource+0x176>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c50:	2b70      	cmp	r3, #112	@ 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xaa>
 8003c54:	2b70      	cmp	r3, #112	@ 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c58:	2b60      	cmp	r3, #96	@ 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x11e>
 8003c5c:	2b60      	cmp	r3, #96	@ 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c60:	2b50      	cmp	r3, #80	@ 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xfe>
 8003c64:	2b50      	cmp	r3, #80	@ 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x13e>
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c70:	2b30      	cmp	r3, #48	@ 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15e>
 8003c74:	2b30      	cmp	r3, #48	@ 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15e>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15e>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15e>
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	f000 fc95 	bl	80045c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	f000 fc7e 	bl	80045c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 fbf2 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	@ 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc4b 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 fc11 	bl	8004532 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	@ 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fc3b 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 fbd2 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	@ 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fc2b 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 fc22 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a48      	ldr	r2, [pc, #288]	@ (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d92:	d00f      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a45      	ldr	r2, [pc, #276]	@ (8003eac <TIM_Base_SetConfig+0x138>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a44      	ldr	r2, [pc, #272]	@ (8003eb0 <TIM_Base_SetConfig+0x13c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a43      	ldr	r2, [pc, #268]	@ (8003eb4 <TIM_Base_SetConfig+0x140>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a42      	ldr	r2, [pc, #264]	@ (8003eb8 <TIM_Base_SetConfig+0x144>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a37      	ldr	r2, [pc, #220]	@ (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a34      	ldr	r2, [pc, #208]	@ (8003eac <TIM_Base_SetConfig+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a33      	ldr	r2, [pc, #204]	@ (8003eb0 <TIM_Base_SetConfig+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a32      	ldr	r2, [pc, #200]	@ (8003eb4 <TIM_Base_SetConfig+0x140>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a32      	ldr	r2, [pc, #200]	@ (8003ebc <TIM_Base_SetConfig+0x148>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <TIM_Base_SetConfig+0x14c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <TIM_Base_SetConfig+0x150>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb8 <TIM_Base_SetConfig+0x144>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a18      	ldr	r2, [pc, #96]	@ (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <TIM_Base_SetConfig+0x140>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00f      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <TIM_Base_SetConfig+0x148>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <TIM_Base_SetConfig+0x14c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <TIM_Base_SetConfig+0x150>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <TIM_Base_SetConfig+0x144>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f023 0201 	bic.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f023 0302 	bic.w	r3, r3, #2
 8003f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a30      	ldr	r2, [pc, #192]	@ (8003fe4 <TIM_OC1_SetConfig+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <TIM_OC1_SetConfig+0x88>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe8 <TIM_OC1_SetConfig+0x120>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_OC1_SetConfig+0x88>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a2e      	ldr	r2, [pc, #184]	@ (8003fec <TIM_OC1_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_OC1_SetConfig+0x88>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff0 <TIM_OC1_SetConfig+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_OC1_SetConfig+0x88>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <TIM_OC1_SetConfig+0x12c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC1_SetConfig+0x88>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <TIM_OC1_SetConfig+0x130>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0308 	bic.w	r3, r3, #8
 8003f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <TIM_OC1_SetConfig+0x11c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <TIM_OC1_SetConfig+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <TIM_OC1_SetConfig+0x120>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_OC1_SetConfig+0xd2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <TIM_OC1_SetConfig+0x124>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_OC1_SetConfig+0xd2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff0 <TIM_OC1_SetConfig+0x128>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_OC1_SetConfig+0xd2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <TIM_OC1_SetConfig+0x12c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC1_SetConfig+0xd2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a18      	ldr	r2, [pc, #96]	@ (8003ff8 <TIM_OC1_SetConfig+0x130>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d111      	bne.n	8003fbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40014400 	.word	0x40014400
 8003ff4:	40014800 	.word	0x40014800
 8003ff8:	40015000 	.word	0x40015000

08003ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 0210 	bic.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <TIM_OC2_SetConfig+0x110>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <TIM_OC2_SetConfig+0x74>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2b      	ldr	r2, [pc, #172]	@ (8004110 <TIM_OC2_SetConfig+0x114>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_OC2_SetConfig+0x74>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <TIM_OC2_SetConfig+0x118>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10d      	bne.n	800408c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800408a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <TIM_OC2_SetConfig+0x110>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <TIM_OC2_SetConfig+0xc0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <TIM_OC2_SetConfig+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_OC2_SetConfig+0xc0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <TIM_OC2_SetConfig+0x11c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC2_SetConfig+0xc0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1d      	ldr	r2, [pc, #116]	@ (800411c <TIM_OC2_SetConfig+0x120>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC2_SetConfig+0xc0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004120 <TIM_OC2_SetConfig+0x124>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC2_SetConfig+0xc0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <TIM_OC2_SetConfig+0x118>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d113      	bne.n	80040e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40015000 	.word	0x40015000
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2b      	ldr	r2, [pc, #172]	@ (8004230 <TIM_OC3_SetConfig+0x10c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_OC3_SetConfig+0x72>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2a      	ldr	r2, [pc, #168]	@ (8004234 <TIM_OC3_SetConfig+0x110>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC3_SetConfig+0x72>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a29      	ldr	r2, [pc, #164]	@ (8004238 <TIM_OC3_SetConfig+0x114>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10d      	bne.n	80041b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <TIM_OC3_SetConfig+0x10c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_OC3_SetConfig+0xbe>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <TIM_OC3_SetConfig+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_OC3_SetConfig+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <TIM_OC3_SetConfig+0x118>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_OC3_SetConfig+0xbe>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <TIM_OC3_SetConfig+0x11c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_OC3_SetConfig+0xbe>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <TIM_OC3_SetConfig+0x120>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC3_SetConfig+0xbe>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <TIM_OC3_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40013400 	.word	0x40013400
 8004238:	40015000 	.word	0x40015000
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <TIM_OC4_SetConfig+0xc8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <TIM_OC4_SetConfig+0x8c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <TIM_OC4_SetConfig+0xcc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_OC4_SetConfig+0x8c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <TIM_OC4_SetConfig+0xd0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_OC4_SetConfig+0x8c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a17      	ldr	r2, [pc, #92]	@ (800431c <TIM_OC4_SetConfig+0xd4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_OC4_SetConfig+0x8c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <TIM_OC4_SetConfig+0xd8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC4_SetConfig+0x8c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <TIM_OC4_SetConfig+0xdc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d109      	bne.n	80042e8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40013400 	.word	0x40013400
 8004318:	40014000 	.word	0x40014000
 800431c:	40014400 	.word	0x40014400
 8004320:	40014800 	.word	0x40014800
 8004324:	40015000 	.word	0x40015000

08004328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800436c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <TIM_OC5_SetConfig+0xbc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <TIM_OC5_SetConfig+0x82>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <TIM_OC5_SetConfig+0xc0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC5_SetConfig+0x82>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <TIM_OC5_SetConfig+0xc4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC5_SetConfig+0x82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC5_SetConfig+0xc8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC5_SetConfig+0x82>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC5_SetConfig+0xcc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC5_SetConfig+0x82>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <TIM_OC5_SetConfig+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d109      	bne.n	80043be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40015000 	.word	0x40015000

080043fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	051b      	lsls	r3, r3, #20
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <TIM_OC6_SetConfig+0xc0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <TIM_OC6_SetConfig+0x84>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <TIM_OC6_SetConfig+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <TIM_OC6_SetConfig+0x84>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a18      	ldr	r2, [pc, #96]	@ (80044c4 <TIM_OC6_SetConfig+0xc8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_OC6_SetConfig+0x84>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <TIM_OC6_SetConfig+0xcc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_OC6_SetConfig+0x84>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_OC6_SetConfig+0xd0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC6_SetConfig+0x84>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <TIM_OC6_SetConfig+0xd4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	029b      	lsls	r3, r3, #10
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40013400 	.word	0x40013400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	40015000 	.word	0x40015000

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f023 0210 	bic.w	r2, r3, #16
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800455c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800456e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e06d      	b.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a30      	ldr	r2, [pc, #192]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2f      	ldr	r2, [pc, #188]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1e      	ldr	r2, [pc, #120]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01d      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d018      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a15      	ldr	r2, [pc, #84]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a11      	ldr	r2, [pc, #68]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10c      	bne.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40013400 	.word	0x40013400
 800475c:	40015000 	.word	0x40015000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40014000 	.word	0x40014000

0800476c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e06a      	b.n	800485e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a19      	ldr	r2, [pc, #100]	@ (800486c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a16      	ldr	r2, [pc, #88]	@ (8004874 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d115      	bne.n	800484c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40013400 	.word	0x40013400
 8004874:	40015000 	.word	0x40015000

08004878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e040      	b.n	800490c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc fdc2 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	@ 0x24
 80048a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb4e 	bl	8004f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f977 	bl	8004bb8 <UART_SetConfig>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e01b      	b.n	800490c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fbcd 	bl	80050a4 <UART_CheckIdleState>
 800490a:	4603      	mov	r3, r0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004928:	2b20      	cmp	r3, #32
 800492a:	d177      	bne.n	8004a1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Transmit+0x24>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e070      	b.n	8004a1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2221      	movs	r2, #33	@ 0x21
 8004948:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fc fe95 	bl	8001678 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x68>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004984:	e02f      	b.n	80049e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	@ 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fc2f 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e03b      	b.n	8004a1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	b292      	uxth	r2, r2
 80049ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e007      	b.n	80049d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1c9      	bne.n	8004986 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2140      	movs	r1, #64	@ 0x40
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fbf9 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e005      	b.n	8004a1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b08a      	sub	sp, #40	@ 0x28
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	f040 80b6 	bne.w	8004bae <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_Receive+0x28>
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e0ae      	b.n	8004bb0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2222      	movs	r2, #34	@ 0x22
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a68:	f7fc fe06 	bl	8001678 <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a86:	d10e      	bne.n	8004aa6 <HAL_UART_Receive+0x80>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <HAL_UART_Receive+0x76>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a9a:	e02d      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	22ff      	movs	r2, #255	@ 0xff
 8004aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa4:	e028      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_UART_Receive+0xa4>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <HAL_UART_Receive+0x9a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22ff      	movs	r2, #255	@ 0xff
 8004aba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004abe:	e01b      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	227f      	movs	r2, #127	@ 0x7f
 8004ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ac8:	e016      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad2:	d10d      	bne.n	8004af0 <HAL_UART_Receive+0xca>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_UART_Receive+0xc0>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	227f      	movs	r2, #127	@ 0x7f
 8004ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ae4:	e008      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	223f      	movs	r2, #63	@ 0x3f
 8004aea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aee:	e003      	b.n	8004af8 <HAL_UART_Receive+0xd2>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004afe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Receive+0xf6>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b24:	e037      	b.n	8004b96 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2120      	movs	r1, #32
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fb5f 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e033      	b.n	8004bb0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	8a7b      	ldrh	r3, [r7, #18]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	3302      	adds	r3, #2
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e00d      	b.n	8004b84 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	8a7b      	ldrh	r3, [r7, #18]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4013      	ands	r3, r2
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1c1      	bne.n	8004b26 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b92      	ldr	r3, [pc, #584]	@ (8004e2c <UART_SetConfig+0x274>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a80      	ldr	r2, [pc, #512]	@ (8004e30 <UART_SetConfig+0x278>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d120      	bne.n	8004c76 <UART_SetConfig+0xbe>
 8004c34:	4b7f      	ldr	r3, [pc, #508]	@ (8004e34 <UART_SetConfig+0x27c>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d817      	bhi.n	8004c70 <UART_SetConfig+0xb8>
 8004c40:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <UART_SetConfig+0x90>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c65 	.word	0x08004c65
 8004c50:	08004c6b 	.word	0x08004c6b
 8004c54:	08004c5f 	.word	0x08004c5f
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e0b5      	b.n	8004dca <UART_SetConfig+0x212>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e0b2      	b.n	8004dca <UART_SetConfig+0x212>
 8004c64:	2304      	movs	r3, #4
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e0af      	b.n	8004dca <UART_SetConfig+0x212>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	e0ac      	b.n	8004dca <UART_SetConfig+0x212>
 8004c70:	2310      	movs	r3, #16
 8004c72:	77fb      	strb	r3, [r7, #31]
 8004c74:	e0a9      	b.n	8004dca <UART_SetConfig+0x212>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8004e38 <UART_SetConfig+0x280>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d124      	bne.n	8004cca <UART_SetConfig+0x112>
 8004c80:	4b6c      	ldr	r3, [pc, #432]	@ (8004e34 <UART_SetConfig+0x27c>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c8c:	d011      	beq.n	8004cb2 <UART_SetConfig+0xfa>
 8004c8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c92:	d817      	bhi.n	8004cc4 <UART_SetConfig+0x10c>
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c98:	d011      	beq.n	8004cbe <UART_SetConfig+0x106>
 8004c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c9e:	d811      	bhi.n	8004cc4 <UART_SetConfig+0x10c>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0xf4>
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d006      	beq.n	8004cb8 <UART_SetConfig+0x100>
 8004caa:	e00b      	b.n	8004cc4 <UART_SetConfig+0x10c>
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e08b      	b.n	8004dca <UART_SetConfig+0x212>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e088      	b.n	8004dca <UART_SetConfig+0x212>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e085      	b.n	8004dca <UART_SetConfig+0x212>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e082      	b.n	8004dca <UART_SetConfig+0x212>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e07f      	b.n	8004dca <UART_SetConfig+0x212>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5b      	ldr	r2, [pc, #364]	@ (8004e3c <UART_SetConfig+0x284>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d124      	bne.n	8004d1e <UART_SetConfig+0x166>
 8004cd4:	4b57      	ldr	r3, [pc, #348]	@ (8004e34 <UART_SetConfig+0x27c>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004cdc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce0:	d011      	beq.n	8004d06 <UART_SetConfig+0x14e>
 8004ce2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce6:	d817      	bhi.n	8004d18 <UART_SetConfig+0x160>
 8004ce8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cec:	d011      	beq.n	8004d12 <UART_SetConfig+0x15a>
 8004cee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cf2:	d811      	bhi.n	8004d18 <UART_SetConfig+0x160>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <UART_SetConfig+0x148>
 8004cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfc:	d006      	beq.n	8004d0c <UART_SetConfig+0x154>
 8004cfe:	e00b      	b.n	8004d18 <UART_SetConfig+0x160>
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e061      	b.n	8004dca <UART_SetConfig+0x212>
 8004d06:	2302      	movs	r3, #2
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e05e      	b.n	8004dca <UART_SetConfig+0x212>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e05b      	b.n	8004dca <UART_SetConfig+0x212>
 8004d12:	2308      	movs	r3, #8
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e058      	b.n	8004dca <UART_SetConfig+0x212>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e055      	b.n	8004dca <UART_SetConfig+0x212>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a47      	ldr	r2, [pc, #284]	@ (8004e40 <UART_SetConfig+0x288>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d124      	bne.n	8004d72 <UART_SetConfig+0x1ba>
 8004d28:	4b42      	ldr	r3, [pc, #264]	@ (8004e34 <UART_SetConfig+0x27c>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004d30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d34:	d011      	beq.n	8004d5a <UART_SetConfig+0x1a2>
 8004d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d3a:	d817      	bhi.n	8004d6c <UART_SetConfig+0x1b4>
 8004d3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d40:	d011      	beq.n	8004d66 <UART_SetConfig+0x1ae>
 8004d42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d46:	d811      	bhi.n	8004d6c <UART_SetConfig+0x1b4>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x19c>
 8004d4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d50:	d006      	beq.n	8004d60 <UART_SetConfig+0x1a8>
 8004d52:	e00b      	b.n	8004d6c <UART_SetConfig+0x1b4>
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e037      	b.n	8004dca <UART_SetConfig+0x212>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e034      	b.n	8004dca <UART_SetConfig+0x212>
 8004d60:	2304      	movs	r3, #4
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e031      	b.n	8004dca <UART_SetConfig+0x212>
 8004d66:	2308      	movs	r3, #8
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e02e      	b.n	8004dca <UART_SetConfig+0x212>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e02b      	b.n	8004dca <UART_SetConfig+0x212>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a33      	ldr	r2, [pc, #204]	@ (8004e44 <UART_SetConfig+0x28c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d124      	bne.n	8004dc6 <UART_SetConfig+0x20e>
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e34 <UART_SetConfig+0x27c>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d88:	d011      	beq.n	8004dae <UART_SetConfig+0x1f6>
 8004d8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d8e:	d817      	bhi.n	8004dc0 <UART_SetConfig+0x208>
 8004d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d94:	d011      	beq.n	8004dba <UART_SetConfig+0x202>
 8004d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d9a:	d811      	bhi.n	8004dc0 <UART_SetConfig+0x208>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <UART_SetConfig+0x1f0>
 8004da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da4:	d006      	beq.n	8004db4 <UART_SetConfig+0x1fc>
 8004da6:	e00b      	b.n	8004dc0 <UART_SetConfig+0x208>
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x212>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e00a      	b.n	8004dca <UART_SetConfig+0x212>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e007      	b.n	8004dca <UART_SetConfig+0x212>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e004      	b.n	8004dca <UART_SetConfig+0x212>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e001      	b.n	8004dca <UART_SetConfig+0x212>
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd2:	d16b      	bne.n	8004eac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004dd4:	7ffb      	ldrb	r3, [r7, #31]
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d838      	bhi.n	8004e4c <UART_SetConfig+0x294>
 8004dda:	a201      	add	r2, pc, #4	@ (adr r2, 8004de0 <UART_SetConfig+0x228>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	08004e4d 	.word	0x08004e4d
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004e4d 	.word	0x08004e4d
 8004e00:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fe f94a 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004e08:	61b8      	str	r0, [r7, #24]
        break;
 8004e0a:	e024      	b.n	8004e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fe f968 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8004e10:	61b8      	str	r0, [r7, #24]
        break;
 8004e12:	e020      	b.n	8004e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <UART_SetConfig+0x290>)
 8004e16:	61bb      	str	r3, [r7, #24]
        break;
 8004e18:	e01d      	b.n	8004e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe f8df 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8004e1e:	61b8      	str	r0, [r7, #24]
        break;
 8004e20:	e019      	b.n	8004e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e015      	b.n	8004e56 <UART_SetConfig+0x29e>
 8004e2a:	bf00      	nop
 8004e2c:	efff69f3 	.word	0xefff69f3
 8004e30:	40013800 	.word	0x40013800
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40004400 	.word	0x40004400
 8004e3c:	40004800 	.word	0x40004800
 8004e40:	40004c00 	.word	0x40004c00
 8004e44:	40005000 	.word	0x40005000
 8004e48:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	77bb      	strb	r3, [r7, #30]
        break;
 8004e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d073      	beq.n	8004f44 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	005a      	lsls	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d916      	bls.n	8004ea6 <UART_SetConfig+0x2ee>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7e:	d212      	bcs.n	8004ea6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f023 030f 	bic.w	r3, r3, #15
 8004e88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	89fa      	ldrh	r2, [r7, #14]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e04e      	b.n	8004f44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	77bb      	strb	r3, [r7, #30]
 8004eaa:	e04b      	b.n	8004f44 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d827      	bhi.n	8004f02 <UART_SetConfig+0x34a>
 8004eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0x300>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fe f8de 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e013      	b.n	8004f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fe f8fc 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	61b8      	str	r0, [r7, #24]
        break;
 8004eea:	e00f      	b.n	8004f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <UART_SetConfig+0x3a4>)
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e00c      	b.n	8004f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fe f873 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8004ef6:	61b8      	str	r0, [r7, #24]
        break;
 8004ef8:	e008      	b.n	8004f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efe:	61bb      	str	r3, [r7, #24]
        break;
 8004f00:	e004      	b.n	8004f0c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	77bb      	strb	r3, [r7, #30]
        break;
 8004f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	085a      	lsrs	r2, r3, #1
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	d909      	bls.n	8004f40 <UART_SetConfig+0x388>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f32:	d205      	bcs.n	8004f40 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e001      	b.n	8004f44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01a      	beq.n	8005076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800505e:	d10a      	bne.n	8005076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b098      	sub	sp, #96	@ 0x60
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050b4:	f7fc fae0 	bl	8001678 <HAL_GetTick>
 80050b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d12e      	bne.n	8005126 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f88c 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d021      	beq.n	8005126 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005100:	647b      	str	r3, [r7, #68]	@ 0x44
 8005102:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e062      	b.n	80051ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d149      	bne.n	80051c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	2200      	movs	r2, #0
 800513e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f856 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03c      	beq.n	80051c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	623b      	str	r3, [r7, #32]
   return(result);
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30
 800516e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e6      	bne.n	800514e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	617b      	str	r3, [r7, #20]
   return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e011      	b.n	80051ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3758      	adds	r7, #88	@ 0x58
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	e04f      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d04b      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fc fa33 	bl	8001678 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <UART_WaitOnFlagUntilTimeout+0x30>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e04e      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d037      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b80      	cmp	r3, #128	@ 0x80
 800523a:	d034      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b40      	cmp	r3, #64	@ 0x40
 8005240:	d031      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d110      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f838 	bl	80052ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e029      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005280:	d111      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f81e 	bl	80052ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0a0      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b095      	sub	sp, #84	@ 0x54
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	61fb      	str	r3, [r7, #28]
   return(result);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	2b01      	cmp	r3, #1
 8005342:	d118      	bne.n	8005376 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	60bb      	str	r3, [r7, #8]
   return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0310 	bic.w	r3, r3, #16
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	613b      	str	r3, [r7, #16]
   return(result);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	@ 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <memset>:
 8005396:	4402      	add	r2, r0
 8005398:	4603      	mov	r3, r0
 800539a:	4293      	cmp	r3, r2
 800539c:	d100      	bne.n	80053a0 <memset+0xa>
 800539e:	4770      	bx	lr
 80053a0:	f803 1b01 	strb.w	r1, [r3], #1
 80053a4:	e7f9      	b.n	800539a <memset+0x4>
	...

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4d0d      	ldr	r5, [pc, #52]	@ (80053e0 <__libc_init_array+0x38>)
 80053ac:	4c0d      	ldr	r4, [pc, #52]	@ (80053e4 <__libc_init_array+0x3c>)
 80053ae:	1b64      	subs	r4, r4, r5
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	2600      	movs	r6, #0
 80053b4:	42a6      	cmp	r6, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	4d0b      	ldr	r5, [pc, #44]	@ (80053e8 <__libc_init_array+0x40>)
 80053ba:	4c0c      	ldr	r4, [pc, #48]	@ (80053ec <__libc_init_array+0x44>)
 80053bc:	f000 f818 	bl	80053f0 <_init>
 80053c0:	1b64      	subs	r4, r4, r5
 80053c2:	10a4      	asrs	r4, r4, #2
 80053c4:	2600      	movs	r6, #0
 80053c6:	42a6      	cmp	r6, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d0:	4798      	blx	r3
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053da:	4798      	blx	r3
 80053dc:	3601      	adds	r6, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	080054ac 	.word	0x080054ac
 80053e4:	080054ac 	.word	0x080054ac
 80053e8:	080054ac 	.word	0x080054ac
 80053ec:	080054b0 	.word	0x080054b0

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
